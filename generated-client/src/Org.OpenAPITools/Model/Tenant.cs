// <auto-generated>
/*
 * HousingRentalSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Tenant
    /// </summary>
    public partial class Tenant : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tenant" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="email">email</param>
        /// <param name="propertyId">propertyId</param>
        /// <param name="rentalStartDate">rentalStartDate</param>
        /// <param name="rentalEndDate">rentalEndDate</param>
        /// <param name="property">property</param>
        [JsonConstructor]
        public Tenant(Option<int?> id = default, Option<string?> name = default, Option<string?> email = default, Option<int?> propertyId = default, Option<DateTime?> rentalStartDate = default, Option<DateTime?> rentalEndDate = default, Option<Property?> property = default)
        {
            IdOption = id;
            NameOption = name;
            EmailOption = email;
            PropertyIdOption = propertyId;
            RentalStartDateOption = rentalStartDate;
            RentalEndDateOption = rentalEndDate;
            PropertyOption = property;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of PropertyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PropertyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PropertyId
        /// </summary>
        [JsonPropertyName("propertyId")]
        public int? PropertyId { get { return this.PropertyIdOption; } set { this.PropertyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of RentalStartDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> RentalStartDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RentalStartDate
        /// </summary>
        [JsonPropertyName("rentalStartDate")]
        public DateTime? RentalStartDate { get { return this.RentalStartDateOption; } set { this.RentalStartDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of RentalEndDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> RentalEndDateOption { get; private set; }

        /// <summary>
        /// Gets or Sets RentalEndDate
        /// </summary>
        [JsonPropertyName("rentalEndDate")]
        public DateTime? RentalEndDate { get { return this.RentalEndDateOption; } set { this.RentalEndDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Property
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Property?> PropertyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [JsonPropertyName("property")]
        public Property? Property { get { return this.PropertyOption; } set { this.PropertyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tenant {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PropertyId: ").Append(PropertyId).Append("\n");
            sb.Append("  RentalStartDate: ").Append(RentalStartDate).Append("\n");
            sb.Append("  RentalEndDate: ").Append(RentalEndDate).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Tenant" />
    /// </summary>
    public class TenantJsonConverter : JsonConverter<Tenant>
    {
        /// <summary>
        /// The format to use to serialize RentalStartDate
        /// </summary>
        public static string RentalStartDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize RentalEndDate
        /// </summary>
        public static string RentalEndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Tenant" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Tenant Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<int?> propertyId = default;
            Option<DateTime?> rentalStartDate = default;
            Option<DateTime?> rentalEndDate = default;
            Option<Property?> property = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "propertyId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                propertyId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "rentalStartDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rentalStartDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "rentalEndDate":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rentalEndDate = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "property":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                property = new Option<Property?>(JsonSerializer.Deserialize<Property>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Tenant.");

            if (propertyId.IsSet && propertyId.Value == null)
                throw new ArgumentNullException(nameof(propertyId), "Property is not nullable for class Tenant.");

            if (rentalStartDate.IsSet && rentalStartDate.Value == null)
                throw new ArgumentNullException(nameof(rentalStartDate), "Property is not nullable for class Tenant.");

            if (rentalEndDate.IsSet && rentalEndDate.Value == null)
                throw new ArgumentNullException(nameof(rentalEndDate), "Property is not nullable for class Tenant.");

            if (property.IsSet && property.Value == null)
                throw new ArgumentNullException(nameof(property), "Property is not nullable for class Tenant.");

            return new Tenant(id, name, email, propertyId, rentalStartDate, rentalEndDate, property);
        }

        /// <summary>
        /// Serializes a <see cref="Tenant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tenant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Tenant tenant, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tenant, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Tenant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tenant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Tenant tenant, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tenant.PropertyOption.IsSet && tenant.Property == null)
                throw new ArgumentNullException(nameof(tenant.Property), "Property is required for class Tenant.");

            if (tenant.IdOption.IsSet)
                writer.WriteNumber("id", tenant.IdOption.Value!.Value);

            if (tenant.NameOption.IsSet)
                if (tenant.NameOption.Value != null)
                    writer.WriteString("name", tenant.Name);
                else
                    writer.WriteNull("name");

            if (tenant.EmailOption.IsSet)
                if (tenant.EmailOption.Value != null)
                    writer.WriteString("email", tenant.Email);
                else
                    writer.WriteNull("email");

            if (tenant.PropertyIdOption.IsSet)
                writer.WriteNumber("propertyId", tenant.PropertyIdOption.Value!.Value);

            if (tenant.RentalStartDateOption.IsSet)
                writer.WriteString("rentalStartDate", tenant.RentalStartDateOption.Value!.Value.ToString(RentalStartDateFormat));

            if (tenant.RentalEndDateOption.IsSet)
                writer.WriteString("rentalEndDate", tenant.RentalEndDateOption.Value!.Value.ToString(RentalEndDateFormat));

            if (tenant.PropertyOption.IsSet)
            {
                writer.WritePropertyName("property");
                JsonSerializer.Serialize(writer, tenant.Property, jsonSerializerOptions);
            }
        }
    }
}
